
calculate_future_value.py
invoke(data: Dict[str, Any], closing_price_or_nav: float, growth_rate: float, number_of_years: int) -> str

calculate_liabilities.py
invoke(data: Dict[str, Any], instrument_id: str) -> str

calculate_nav.py
invoke(data: Dict[str, Any], fund_id: str, calculation_date: str) -> str

cancel_subscription.py
invoke(data: Dict[str, Any], subscription_id: str) -> str

create_commitment.py
invoke(data: Dict[str, Any], investor_id: str, fund_id: str, amount: float, due_date: str, compliance_officer_approval: bool) -> str

create_fund.py
invoke(data: Dict[str, Any], fund_name: str, fund_type: str, initial_size: float, manager_id: str, compliance_officer_review: bool, fund_manager_approval: bool) -> str

create_subscription.py
invoke(data: Dict[str, Any], investor_id: str, fund_id: str, amount: float, compliance_officer_approval: bool) -> str

create_upload_document.py
invoke(data: Dict[str, Any], user_id: str, size_bytes: int, confidentiality_level: str, file_name: str, file_format: str, report_id: Optional[str] = None) -> str

deactivate_reactivate_instrument.py
invoke(data: Dict[str, Any], instrument_id: str, action: str, fund_manager_approval: bool, compliance_officer_approval: bool) -> str

delete_fund.py
invoke(data: Dict[str, Any], fund_id: str, compliance_officer_approval: bool, fund_manager_approval: bool) -> str

execute_trade.py
invoke(data: Dict[str, Any], fund_id: str, instrument_id: str, quantity: float, price_limit: float, trader_id: str, fund_manager_approval: bool) -> str

fulfill_commitment.py
invoke(data: Dict[str, Any], commitment_id: str, payment_receipt_amount: float, payment_date: str, payment_method: str) -> str

generate_report.py
invoke(data: Dict[str, Any], report_type: str, period: str, requester_role: str, fund_id: Optional[str] = None, investor_id: Optional[str] = None) -> str

get_fund_instruments.py
invoke(data: Dict[str, Any], fund_id: str) -> str

investor_offboarding.py
invoke(data: Dict[str, Any], investor_id: str, compliance_officer_approval: bool) -> str

investor_onboarding.py
invoke(data: Dict[str, Any], legal_entity_name: str, incorporation_registration_number: str, date_of_incorporation: str, country_of_incorporation: str, registered_business_address: str, tax_identification_number: str, source_of_funds_declaration: str, compliance_officer_approval: bool) -> str

process_redemption.py
invoke(data: Dict[str, Any], investor_id: str, fund_id: str, amount_or_units: float, compliance_approval: bool, finance_approval: bool) -> str

switch_funds.py
invoke(data: Dict[str, Any], investor_id: str, current_fund_id: str, target_fund_id: str, switch_amount: float) -> str

update_fund.py
invoke(data: Dict[str, Any], fund_id: str, field_name: str, field_value: Union[str, int, float], fund_manager_approval: bool, compliance_review_required: Optional[bool] = None, compliance_officer_approval: Optional[bool] = None) -> str

update_instrument.py
invoke(data: Dict[str, Any], instrument_id: str, proposed_changes: Dict[str, Any], action, updated_by, compliance_review_required: Optional[bool]) -> str

update_subscription.py
invoke(data: Dict[str, Any], subscription_id: str, field_name, field_value, compliance_officer_approval: bool, finance_officer_approval: bool) -> str


add_new_trade_for_fund.py
invoke(data: Dict[str, Any], fund_id: str, instrument_id: str, quantity: float, price: float, side: str, status: str = "pending", validate_positions: bool = True) -> str

add_new_user.py
invoke(data: Dict[str, Any], first_name: str, last_name: str, email: str, role: str, timezone: str, status: str = "active") -> str

find_user.py
invoke(data: Dict[str, Any], user_id: Optional[str] = None, email: Optional[str] = None, role: Optional[str] = None, status: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None) -> str

get_daily_profit_loss_by_fund.py
invoke(data: Dict[str, Any], fund_id: str, trade_date: Optional[str] = None) -> str

get_fund_trade_details.py
invoke(data: Dict[str, Any], fund_id: str, instrument_id: Optional[str] = None, status: Optional[str] = None, side: Optional[str] = None) -> str

get_growth_rate.py
invoke(data: Dict[str, Any], fund_type: str, instrument_type: str) -> str

get_instruments.py
invoke(data: Dict[str, Any], instrument_type: Optional[str] = None, status: Optional[str] = None, ticker: Optional[str] = None) -> str

get_instruments_prices.py
invoke(data: Dict[str, Any], instrument_id: Optional[str] = None, price_date: Optional[str] = None) -> str

get_notifications.py
invoke(data: Dict[str, Any], email: Optional[str] = None, notification_type: Optional[str] = None, status: Optional[str] = None, notification_class: Optional[str] = None) -> str

get_reports.py
invoke(data: Dict[str, Any], fund_id: Optional[str] = None, investor_id: Optional[str] = None, report_type: Optional[str] = None, status: Optional[str] = None) -> str

send_email_notification.py
invoke(data: Dict[str, Any], email: str, notification_type: str, notification_class: str, reference_id: Optional[str] = None) -> str

update_instrument_price.py
invoke(data: Dict[str, Any], instrument_id: str, price_date: str, open_price: Optional[float] = None, high_price: Optional[float] = None, low_price: Optional[float] = None, close_price: Optional[float] = None) -> str

update_trade.py
invoke(data: Dict[str, Any], trade_id: str, status: Optional[str] = None, quantity: Optional[float] = None, price: Optional[float] = None) -> str


get_available_funds.py
invoke(data: Dict[str, Any], fund_id: Optional[str] = None, investor_id: Optional[str] = None, fund_type: Optional[str] = None, status: Optional[str] = None) -> str

get_fund_nav_history.py
invoke(data: Dict[str, Any], fund_id: str, start_date: Optional[str] = None, end_date: Optional[str] = None) -> str

get_investor_commitments.py
invoke(data: Dict[str, Any], investor_id: str, status: Optional[str] = None, fund_id: Optional[str] = None) -> str

get_investor_documents.py
invoke(data: Dict[str, Any], investor_id: str, document_format: Optional[str] = None, confidentiality_level: Optional[str] = None, status: Optional[str] = None) -> str

get_investor_portfolio.py
invoke(data: Dict[str, Any], investor_id: str) -> str

get_investor_portfolio_holdings.py
invoke(data: Dict[str, Any], investor_id: str) -> str

get_investor_profile.py
invoke(data: Dict[str, Any], investor_id: str) -> str

get_investor_redemptions.py
invoke(data: Dict[str, Any], investor_id: str, status: Optional[str] = None) -> str

get_investor_statements.py
invoke(data: Dict[str, Any], investor_id: str, report_type: Optional[str] = None, start_date: Optional[str] = None, end_date: Optional[str] = None) -> str

get_investor_subscriptions.py
invoke(data: Dict[str, Any], investor_id: str, status: Optional[str] = None, fund_id: Optional[str] = None) -> str

get_investor_transactions_history.py
invoke(data: Dict[str, Any], investor_id: str, start_date: Optional[str] = None, end_date: Optional[str] = None, transaction_type: Optional[str] = None) -> str


add_new_holding.py
invoke(data: Dict[str, Any], portfolio_id: str, fund_id: str, quantity: float, cost_basis: float) -> str

get_filtered_investors.py
invoke(data: Dict[str, Any], accreditation_status: Optional[str] = None, status: Optional[str] = None, country: Optional[str] = None, source_of_funds: Optional[str] = None, name_contains: Optional[str] = None, registration_number: Optional[int] = None, incorporation_date_from: Optional[str] = None, incorporation_date_to: Optional[str] = None, countries: Optional[List[str]] = None, has_tax_id: Optional[bool] = None, has_registration_number: Optional[bool] = None, created_after: Optional[str] = None, created_before: Optional[str] = None, email_domain: Optional[str] = None, address_contains: Optional[str] = None) -> str

get_investor_portfolio.py
invoke(data: Dict[str, Any], investor_id: str) -> str

get_portfolio_holdings.py
invoke(data: Dict[str, Any], portfolio_id: str) -> str

list_funds_with_filter.py
invoke(data: Dict[str, Any], fund_type: Optional[str] = None, manager_id: Optional[str] = None, status: Optional[str] = None, min_size: Optional[float] = None, max_size: Optional[float] = None) -> str

update_investor_details.py
invoke(data: Dict[str, Any], investor_id: str, name: Optional[str] = None, contact_email: Optional[str] = None, accreditation_status: Optional[str] = None, registration_number: Optional[int] = None, date_of_incorporation: Optional[str] = None, country: Optional[str] = None, address: Optional[str] = None, tax_id: Optional[str] = None, source_of_funds: Optional[str] = None, status: Optional[str] = None) -> str

update_investor_portfolio_holding.py
invoke(data: Dict[str, Any], holding_id: str, quantity: Optional[float] = None, cost_basis: Optional[float] = None) -> str


create_invoice.py
invoke(data: Dict[str, Any], commitment_id: str, invoice_date: str, due_date: str, amount: float, status: str = "issued") -> str

delete_invoice.py
invoke(data: Dict[str, Any], invoice_id: str) -> str

get_commitments.py
invoke(data: Dict[str, Any], fund_id: Optional[str] = None, investor_id: Optional[str] = None, status: Optional[str] = None) -> str

get_invoices.py
invoke(data: Dict[str, Any], commitment_id: Optional[str] = None, status: Optional[str] = None, due_date_from: Optional[str] = None, due_date_to: Optional[str] = None) -> str

get_nav_records.py
invoke(data: Dict[str, Any], fund_id: Optional[str] = None, start_date: Optional[str] = None, end_date: Optional[str] = None, nav_date: Optional[str] = None) -> str

get_payment_history.py
invoke(data: Dict[str, Any], invoice_id: Optional[str] = None, subscription_id: Optional[str] = None, payment_method: Optional[str] = None, status: Optional[str] = None, start_date: Optional[str] = None, end_date: Optional[str] = None) -> str

get_subscriptions.py
invoke(data: Dict[str, Any], fund_id: Optional[str] = None, investor_id: Optional[str] = None, status: Optional[str] = None, request_assigned_to: Optional[str] = None) -> str

register_payment.py
invoke(data: Dict[str, Any], invoice_id: str, payment_date: str, amount: str, payment_method: str, status: str = "draft") -> str

remove_holding.py
invoke(data: Dict[str, Any], holding_id: str) -> str

retrieve_invoices.py
invoke(data: Dict[str, Any], invoice_ids: Optional[List[str]] = None) -> str

summary_of_instrument_types_by_prices.py
invoke(data: Dict[str, Any], price_date: Optional[str] = None, instrument_type: Optional[str] = None) -> str

update_invoice.py
invoke(data: Dict[str, Any], invoice_id: str, invoice_date: Optional[str] = None, due_date: Optional[str] = None, amount: Optional[float] = None, status: Optional[str] = None) -> str

update_nav_record_value.py
invoke(data: Dict[str, Any], nav_id: str, nav_value: str) -> str